generate_agent_prompt: |
  Based on the rephrased agent request below, please do the following:
  1. Do step-by-step reasoning and think to better understand the request.
  2. Code the best Autogen Studio Python agent as per the request.
  3. Always include the agent filename in the format `# Agent filename: [agent_name].py` as the first line of the code.
  4. Return only the agent code, no commentary, intro, or other extra text. If there ARE any non-code lines, 
      please pre-pend them with a '#' symbol to comment them out.
  5. A proper agent will have these parts:
     a. Imports (import libraries needed for the agent)
     b. Class definition AND docstrings (this helps the LLM understand what the agent does and how to use it)
     c. Class methods (the actual code that implements the agent's behavior)
     d. (optional) Example usage - ALWAYS commented out
     Here is an example of a well formatted agent:
     # Agent filename: [agent_name].py
     # Import necessary module(s)
     import necessary_module
     class Agent:
         # docstrings
         """
                :
         The name of the agent.
         An agent that performs tasks based on the given request.
         Methods:
         perform_task(args): Executes the task as per the request.
         """
         def init(self, init_params):
             """
             Initializes the Agent with the given parameters.
             Parameters:
             init_params (type): Description of initialization parameters.
             """
             # Initialize with given parameters
             self.init_params = init_params
         def perform_task(self, task_params):
             """
             Executes the task based on the given parameters.
             Parameters:
             task_params (type): Description of task parameters.
             Returns:
             return_type: Description of the return value.
             """
             # Body of the method
             # Implement the task logic here
             pass
     # Example usage:
     # agent = Agent(init_params)
     # result = agent.perform_task(task_params)
     # print(result)
  Rephrased agent request: "{rephrased_agent_request}"