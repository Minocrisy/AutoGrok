type: assistant
config:
  name: primary_assistant
  llm_config:
    config_list:
      - user_id: default
        timestamp: ""
        model: ""
        base_url: null
        api_type: null
        api_version: null
        description: OpenAI model configuration
    temperature: 0.1
    cache_seed: null
    timeout: null
    max_tokens: null
    extra_body: null
  human_input_mode: NEVER
  max_consecutive_auto_reply: 30
  system_message: |
    You are a helpful AI assistant. Solve tasks using your coding and language skills. In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute. 
    1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself. 
    2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly. Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill. When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user. If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user. If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try. When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible. Reply 'TERMINATE' in the end when everything is done.
  is_termination_msg: null
  code_execution_config: null
  default_auto_reply: ""
  description: A primary assistant agent that writes plans and code to solve tasks. booger
timestamp: ""
user_id: default
skills:
  - title: fetch_web_content
    content: |
      from typing import Optional
      import requests
      import collections
      collections.Callable = collections.abc.Callable
      from bs4 import BeautifulSoup

      def fetch_web_content(url: str) -> Optional[str]:
          """
          Fetches the text content from a website.

          Args:
              url (str): The URL of the website.

          Returns:
              Optional[str]: The content of the website.
          """
          try:
              # Send a GET request to the URL
              response = requests.get(url)

              # Check for successful access to the webpage
              if response.status_code == 200:
                  # Parse the HTML content of the page using BeautifulSoup
                  soup = BeautifulSoup(response.text, "html.parser")

                  # Extract the content of the <body> tag
                  body_content = soup.body

                  if body_content:
                      # Return all the text in the body tag, stripping leading/trailing whitespaces
                      return " ".join(body_content.get_text(strip=True).split())
                  else:
                      # Return None if the <body> tag is not found
                      return None
              else:
                  # Return None if the status code isn't 200 (success)
                  return None
          except requests.RequestException:
              # Return None if any request-related exception is caught
              return None
    file_name: fetch_web_content.json
    description: null
    timestamp: ""
    user_id: default
